% OOPS2 - A toy production system interpreter. It uses a forward chaining,
% data driven, rule based approach for expert system development.
%
% Version 2, the simplest version without LEX, MEA, or conflict sets
%
% author Dennis Merritt
% Copyright (c) Dennis Merritt, 1986
% operator definitions

:-op(800,xfx,==>). % used to separate LHS and RHS of rule
:-op(500,xfy,:). % used to separate attributes and values
:-op(810,fx,rule). % used to define rule
:-op(700,xfy,#). % used for unification instead of =
:- use_module(library(csv)).
:- dynamic ma_10/2.
:- dynamic ma_20/2.
:- dynamic ma_50/2.
:- dynamic isa/2.
:- dynamic zone/2.
:- dynamic trend_is/1.
:- dynamic close_value/1.
:- dynamic current_count/1.
:- dynamic order/1.
:- dynamic fact/1.

main :-
    init_dynamic_fact,
    read_csv_file('ohlc_data.csv', Rows),
    process_rows(Rows),
    check_zone_and_trend,
    welcome,
    supervisor.

welcome :-
    nl, nl,
    write('FOREX EXPERT SYSTEM'), nl, nl,
    write('The => prompt accepts three commands:'), nl, nl,
    write(' load. - enter the forward chaining KB.'), nl,
    write(' list. - lists working memory.'), nl,
    write(' go. - starts the inference.'), nl,
    write(' exit. - does what you''d expect.'), nl, nl.

% the supervisor, uses a repeat fail loop to read and process commands
% from the user
supervisor :-
    repeat,
    write('=> '),
    read(X),
    % write(echo1-X),
    doit(X),
    % write(echo2-X),
    X = exit.

doit(X) :-
    do(X).

% actions to take based on commands
do(exit) :-
    !.
    
do(go) :-
    go,
    !.

do(load) :-
    load,
    !.

do(list) :-
    lst, % lists all of working storage
    !.

do(list(X)) :-
    lst(X), % lists all which match the pattern
    !.

do(_) :-
    write('invalid command').

% loads the rules (Prolog terms) into the Prolog database
load :-
    write('Enter file name in single quotes (ex. ''omar_strategy.okb''.): '),
    read(F),
    reconsult(F). % loads a rule file into interpreter work space

% working storage is represented by database terms stored
% under the key "fact"
assert_list([]) :-
    !.

assert_list([H|T]) :-
    assertz(fact(H)),
    !,
    assert_list(T).

% the main inference loop, find a rule and try it. if it fired, say so
% and repeat the process. if not go back and try the next rule. when
% no rules succeed, stop the inference
go :-
    call(rule ID: LHS ==> RHS),
    try(LHS,RHS),
    write('Rule fired '), write(ID), nl,
    !,
    go.
go.

try(LHS,RHS) :-
    match(LHS),
    process(RHS,LHS),
    !.

% recursively go through the LHS list, matching conditions against
% working storage
match([]) :-
    !.

match([N:Prem|Rest]) :-
    !,
    (fact(Prem)
    ;
    test(Prem) % a comparison test rather than a fact
    ),
    match(Rest).
    
match([Prem|Rest]) :-
    (fact(Prem) % condition number not specified
    ;
    test(Prem)
    ),
    match(Rest).

% various tests allowed on the LHS
test(not(X)) :-
    fact(X),
    !,
    fail.

test(not(X)) :-
    !.

test(X # Y) :-
    X = Y,
    !.

test(X > Y) :-
    X > Y,
    !.
    
test(X >= Y) :-
    X >= Y,
    !.

test(X < Y) :-
    X < Y,
    !.

test(X =< Y) :-
    X =< Y,
    !.

test(X = Y) :-
    X is Y,
    !.
    
test(member(X,Y)) :-
    member(X,Y),
    !.

% recursively execute each of the actions in the RHS list
process([],_) :-
    !.

process([Action|Rest],LHS) :-
    take(Action,LHS),
    !,
    process(Rest,LHS).

% if its retract, use the reference numbers stored in the Lrefs list,
% otherwise just take the action
take(retract(N),LHS) :-
    (N == all
    ;
    integer(N)
    ),
    retr(N,LHS),!.

take(A,_) :-
    take(A),!.

take(retract(X)) :-
    retract(fact(X)),
    !.

take(assert(X)) :-
    asserta(fact(X)),
    write('You should position as: '), write(X), nl,
    !.

take(X # Y) :-
    X = Y,
    !.
    
take(X = Y) :-
    X is Y,
    !.

take(write(X)) :-
    write(X),
    !.

take(nl) :-
    nl,
    !.

take(read(X)) :-
    read(X),
    !.

take(prompt(X,Y)) :-
    nl, write(X), read(Y),
    !.

take(member(X,Y)) :-
    member(X,Y),
    !.

take(list(X)) :-
    lst(X),
    !.

% logic for retraction
retr(all,LHS) :-
    retrall(LHS),
    !.

retr(N,[]) :-
    write('retract error, no '-N), nl,
    !.

retr(N,[N:Prem|_]) :-
    retract(fact(Prem)),
    !.

retr(N,[_|Rest]) :-
    !,
    retr(N,Rest).

retrall([]).
retrall([N:Prem|Rest]) :-
    retract(fact(Prem)),
    !, retrall(Rest).

retrall([Prem|Rest]) :-
    retract(fact(Prem)),
    !, retrall(Rest).

retrall([_|Rest]) :- % must have been a test
    retrall(Rest).

% list all of the terms in working storage
lst :-
    fact(X),
    write(X), nl,
    fail.

lst :-
    !.

% lists all of the terms which match the pattern
lst(X) :-
    fact(X),
    write(X), nl,
    fail.

lst(_) :-
    !.

% utilities
member(X,[X|Y]).
member(X,[Y|Z]) :-
member(X,Z).

% Candlestick Manipulation

init_dynamic_fact :-
    assert(current_count(0)),
    assert(ma_10([], 0)),
    assert(ma_20([], 0)),
    assert(ma_50([], 0)),
    assert(isa(candlestick, _)),
    assert(zone(candlestick, _)),
    assert(close_value(0)),
    assert(trend_is(_)),
    assert(fact(_)).

green_candlestick(ohlc(Open, High, Low, Close)) :-
    Open < Close,
    High >= Close,
    Low =< Open.

red_candlestick(ohlc(Open, High, Low, Close)) :-
    Open > Close,
    High >= Open,
    Low =< Close.

read_csv_file(File, Rows) :-
    csv_read_file(File, Rows, [functor(row)]).

process_rows([]).

process_rows([Row|Rows]) :-
    Row = row(O_val, H_val, L_val, C_val),
    retractall(isa(_, _)),
    retractall(fact(_)),
    retractall(close_value(_)),
    assert(close_value(C_val)),
    % Save the values for each term
    (green_candlestick(ohlc(O_val, H_val, L_val, C_val))
    -> 
    assert(isa(candlestick, green)),
    asserta(fact(isa(candlestick, green)))
    ;red_candlestick(ohlc(O_val, H_val, L_val, C_val))
    -> 
    assert(isa(candlestick, red)),
    asserta(fact(isa(candlestick, red)))
    ),
    update_moving_averages(C_val),
    process_rows(Rows).

check_zone(Close, ZM10, ZM20) :-
    retractall(zone(_,_)),
    (Close >= ZM10, Close =< ZM20
    ->
    assert(zone(candlestick, thezone)),
    assert(fact(zone(candlestick, thezone)))
    ; Close =< ZM10, Close >= ZM20
    ->
    assert(zone(candlestick, thezone)),
    assert(fact(zone(candlestick, thezone)))
    ; Close > ZM10, Close > ZM20, ZM10 > ZM20
    ->
    assert(zone(candlestick, above)),
    assert(fact(zone(candlestick, above)))
    ; Close > ZM10, Close > ZM20, ZM10 < ZM20
    ->
    assert(zone(candlestick, above)),
    assert(fact(zone(candlestick, above)))
    ; Close < ZM10, Close < ZM20, ZM10 < ZM20
    ->
    assert(zone(candlestick, below)),
    assert(fact(zone(candlestick, below)))
    ; Close < ZM10, Close < ZM20, ZM10 > ZM20
    ->
    assert(zone(candlestick, below)),
    assert(fact(zone(candlestick, below)))
    ).


check_trend(TMA10, TMA20, TMA50) :-
    retractall(trend_is(_)),
    (TMA10 >= TMA20, TMA20 > TMA50
    ->
    assert(trend_is(bullish)),
    assert(fact(trend_is(bullish)))
    ; TMA10 < TMA20, TMA20 > TMA50
    ->
    assert(trend_is(hold)),
    assert(fact(trend_is(hold)))
    ; TMA10 =< TMA20, TMA20 < TMA50
    ->
    assert(trend_is(bearish)),
    assert(fact(trend_is(brearish)))
    ; TMA10 > TMA20, TMA20 < TMA50
    ->
    assert(trend_is(hold)),
    assert(fact(trend_is(hold)))
    ; TMA50 >= TMA10, TMA50 =< TMA20
    ->
    assert(trend_is(hold)),
    assert(fact(trend_is(hold)))
    ; TMA50 =< TMA10, TMA50 >= TMA20
    ->
    assert(trend_is(hold)),
    assert(fact(trend_is(hold)))
    ).

update_moving_averages(Close) :-
    retract(current_count(C)),
    retract(ma_10(List10, _)),
    retract(ma_20(List20, _)),
    retract(ma_50(List50, _)),
    NewCount is C + 1,
    asserta(current_count(NewCount)),
    ( NewCount =< 10
    ->
    insert_element_last(List10, Close, UpdatedList10),
    sum_float_list(UpdatedList10, Sum10),
    calculate_and_assert_moving_average(10, Sum10, UpdatedList10)
    ;
     NewCount > 10
    ->
    insert_close_value_10(List10, Close, ReturnList10),
    sum_float_list(ReturnList10, Sum10),
    calculate_and_assert_moving_average(10, Sum10, ReturnList10)
    ),

    ( NewCount =< 20
    ->
    insert_element_last(List20, Close, UpdatedList20),
    sum_float_list(UpdatedList20, Sum20),
    calculate_and_assert_moving_average(20, Sum20, UpdatedList20)
    ;
     NewCount > 20
    ->
    insert_close_value_20(List20, Close, ReturnList20),
    sum_float_list(ReturnList20, Sum20),
    calculate_and_assert_moving_average(20, Sum20, ReturnList20)
    ),

    ( NewCount =< 50
    ->
    insert_element_last(List50, Close, UpdatedList50),
    sum_float_list(UpdatedList50, Sum50),
    calculate_and_assert_moving_average(50, Sum50, UpdatedList50)
    ;
     NewCount > 50
    ->
    insert_close_value_50(List50, Close, ReturnList50),
    sum_float_list(ReturnList50, Sum50),
    calculate_and_assert_moving_average(50, Sum50, ReturnList50)
    ).

calculate_and_assert_moving_average(Period, Sum, UpdatedList) :-
    ( Period = 10
    ->
    MovingAverage is Sum / Period,
    assertz(ma_10(UpdatedList, MovingAverage))
    ;
     Period = 20
    ->
    MovingAverage is Sum / Period,
    assertz(ma_20(UpdatedList, MovingAverage))
    ;
     Period = 50
    ->
    MovingAverage is Sum / Period,
    assertz(ma_50(UpdatedList, MovingAverage))
    ).

insert_close_value_10(List, Close, ReturnList) :-
    List = [_|Tail], % Skip the first element
    append(Tail, [Close], UpdatedList),
    ReturnList = UpdatedList.


insert_close_value_20(List, Close, ReturnList) :-
    List = [_|Tail], % Skip the first element
    append(Tail, [Close], UpdatedList),
    ReturnList = UpdatedList.

insert_close_value_50(List, Close, ReturnList) :-
    List = [_|Tail], % Skip the first element
    append(Tail, [Close], UpdatedList),
    ReturnList = UpdatedList.


insert_element_last(List, Element, Result) :-
    append(List, [Element], Result).

sum_float_list([], 0).

sum_float_list([X|Xs], Sum) :-
    sum_float_list(Xs, TailSum), % Recursively calculate the sum of the tail
    Sum is X + TailSum.  % Calculate the sum of the list by adding the head to the tail sum

sum_float_list([_|Xs], Sum) :-
    sum_float_list(Xs, Sum).

check_zone_and_trend :-
    ma_10(_, MA10),
    ma_20(_, MA20),
    ma_50(_, MA50),
    close_value(Close),
    format("Moving Averages:\n", []),
    format("Last Close: ~w\n", [Close]),
    format("MA10: ~w\n", [MA10]),
    format("MA20: ~w\n", [MA20]),
    format("MA50: ~w\n", [MA50]),
    check_zone(Close, MA10, MA20),
    check_trend(MA10, MA20, MA50).